<?php

namespace Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class CreditUnionFrontendBundleEntityCustomersProxy extends \CreditUnion\FrontendBundle\Entity\Customers implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }
    
    
    public function getId()
    {
        $this->__load();
        return parent::getId();
    }

    public function setLastname($lastname)
    {
        $this->__load();
        return parent::setLastname($lastname);
    }

    public function getLastname()
    {
        $this->__load();
        return parent::getLastname();
    }

    public function setName($name)
    {
        $this->__load();
        return parent::setName($name);
    }

    public function getName()
    {
        $this->__load();
        return parent::getName();
    }

    public function setMiddlename($middlename)
    {
        $this->__load();
        return parent::setMiddlename($middlename);
    }

    public function getMiddlename()
    {
        $this->__load();
        return parent::getMiddlename();
    }

    public function getPIB()
    {
        $this->__load();
        return parent::getPIB();
    }

    public function setSeriesofpassport($seriesofpassport)
    {
        $this->__load();
        return parent::setSeriesofpassport($seriesofpassport);
    }

    public function getSeriesofpassport()
    {
        $this->__load();
        return parent::getSeriesofpassport();
    }

    public function setNumberofpassport($numberofpassport)
    {
        $this->__load();
        return parent::setNumberofpassport($numberofpassport);
    }

    public function getNumberofpassport()
    {
        $this->__load();
        return parent::getNumberofpassport();
    }

    public function setDateofbirth($dateofbirth)
    {
        $this->__load();
        return parent::setDateofbirth($dateofbirth);
    }

    public function getDateofbirth()
    {
        $this->__load();
        return parent::getDateofbirth();
    }

    public function setCityofresidence($cityofresidence)
    {
        $this->__load();
        return parent::setCityofresidence($cityofresidence);
    }

    public function getCityofresidence()
    {
        $this->__load();
        return parent::getCityofresidence();
    }

    public function setAddress($address)
    {
        $this->__load();
        return parent::setAddress($address);
    }

    public function getAddress()
    {
        $this->__load();
        return parent::getAddress();
    }

    public function setPhonenumber($phonenumber)
    {
        $this->__load();
        return parent::setPhonenumber($phonenumber);
    }

    public function getPhonenumber()
    {
        $this->__load();
        return parent::getPhonenumber();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'lastname', 'name', 'middlename', 'seriesofpassport', 'numberofpassport', 'dateofbirth', 'cityofresidence', 'address', 'phonenumber');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}